# math_exam_analyzer_bloom.py

import streamlit as st
from PyPDF2 import PdfReader
import re
import tempfile
import os

# ‚úÖ ‡∏™‡πà‡∏ß‡∏ô OCR
try:
    import pytesseract
    from pdf2image import convert_from_path
    OCR_AVAILABLE = True
except ImportError:
    OCR_AVAILABLE = False
    st.warning("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö OCR ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pytesseract ‡πÅ‡∏•‡∏∞ pdf2image)")

# ‚úÖ Configuration - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
if OCR_AVAILABLE:
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe" # ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Tesseract ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    POPPLER_PATH = r"C:\Users\LOQ\Downloads\Release-24.08.0-0\poppler-24.08.0\Library\bin"    # ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Poppler ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

st.set_page_config(
    page_title="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°.4",
    page_icon="üìê",
    layout="wide"
)

# üî• CSS ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
st.markdown("""
<style>
    .stApp {
        background-color: #f8f9fa;
    }
    .main-header {
        color: #2c3e50;
        text-align: center;
        padding: 1rem;
    }
    .result-box {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin: 20px 0;
    }
    .success {
        border-left: 5px solid #27ae60;
    }
    .warning {
        border-left: 5px solid #f39c12;
    }
    .error {
        border-left: 5px solid #e74c3c;
    }
    .info {
        border-left: 5px solid #3498db;
    }
    /* ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å */
    .difficulty-summary {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 10px;
        margin: 20px 0;
    }
    .difficulty-item {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        text-align: center;
        box-shadow: 0 1px 5px rgba(0,0,0,0.1);
        flex: 1;
        min-width: 120px;
    }
    .difficulty-easy { border-top: 4px solid #28a745; }
    .difficulty-medium { border-top: 4px solid #ffc107; }
    .difficulty-hard { border-top: 4px solid #dc3545; }
    .overall-difficulty {
        text-align: center;
        padding: 15px;
        border-radius: 8px;
        margin: 15px 0;
        font-size: 1.2em;
        font-weight: bold;
    }
    .difficulty-easy-bg { background-color: #d4edda; color: #155724; }
    .difficulty-medium-bg { background-color: #fff3cd; color: #856404; }
    .difficulty-hard-bg { background-color: #f8d7da; color: #721c24; }
    .difficulty-mixed-bg { background-color: #d1ecf1; color: #0c5460; }
    /* CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */
    .improvement-suggestion {
        background-color: #e7f3ff;
        border-left: 4px solid #3498db;
        padding: 10px;
        margin: 10px 0;
        border-radius: 0 4px 4px 0;
    }
    /* CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bloom's */
    .bloom-level {
        background-color: #fff8e1;
        border-left: 4px solid #ffc107;
        padding: 5px;
        margin: 5px 0;
        border-radius: 0 4px 4px 0;
        font-size: 0.9em;
    }
</style>
""", unsafe_allow_html=True)

st.markdown("<h1 class='main-header'>üìê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°.4 (‡∏ï‡∏≤‡∏° Bloom's Taxonomy)</h1>", unsafe_allow_html=True)

# üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô sidebar
# ‡πÉ‡∏ä‡πâ st.session_state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
if 'min_questions' not in st.session_state:
    st.session_state.min_questions = 10
if 'min_choices' not in st.session_state:
    st.session_state.min_choices = 5

with st.sidebar:
    st.header("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô")
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å session_state ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    st.session_state.min_questions = st.number_input("üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", value=st.session_state.min_questions, min_value=1, step=1, key="min_q_input")
    st.session_state.min_choices = st.number_input("üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", value=st.session_state.min_choices, min_value=1, step=1, key="min_c_input")
    st.divider()
    st.info("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å PDF ‡πÅ‡∏•‡∏∞ OCR ‡∏´‡∏≤‡∏Å PDF ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")

uploaded_file = st.file_uploader("üìé ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF (‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°.4)", type=["pdf"], key="pdf_uploader")

# --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bloom's Taxonomy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°.4 ---
BLOOMS_TAXONOMY_MATH_M4 = {
    "Remembering": {
        "keywords": ["‡∏à‡∏≥", "‡∏ö‡∏≠‡∏Å", "‡πÅ‡∏™‡∏î‡∏á", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô", "‡πÅ‡∏ó‡∏ô", "‡∏Ñ‡∏∑‡∏≠", "‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤", "‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå", "‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢", "‡∏ô‡∏¥‡∏¢‡∏≤‡∏°"],
        "verbs": ["‡∏à‡∏≥", "‡∏ö‡∏≠‡∏Å", "‡πÅ‡∏™‡∏î‡∏á", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô", "‡πÅ‡∏ó‡∏ô", "‡∏£‡∏∞‡∏ö‡∏∏", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà", "‡πÄ‡∏£‡∏µ‡∏¢‡∏Å", "‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"],
        "patterns": [r"‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£\?", r"‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£\?", r"‡∏à‡∏á‡πÅ‡∏™‡∏î‡∏á.*‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå", r"‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô.*‡πÉ‡∏ô‡∏£‡∏π‡∏õ.*", r"‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥.*‡∏Ñ‡∏∑‡∏≠.*", r"‡∏ô‡∏¥‡∏¢‡∏≤‡∏°.*‡∏Ñ‡∏∑‡∏≠.*"]
    },
    "Understanding": {
        "keywords": ["‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", "‡∏™‡∏£‡∏∏‡∏õ", "‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°", "‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ", "‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ", "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", "‡πÄ‡∏û‡∏£‡∏≤‡∏∞", "‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å", "‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô"],
        "verbs": ["‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", "‡∏™‡∏£‡∏∏‡∏õ", "‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°", "‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ", "‡πÅ‡∏™‡∏î‡∏á", "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à", "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", "‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°"],
        "patterns": [r"‡∏à‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢.*", r"‡∏à‡∏á‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°.*", r"‡∏à‡∏á‡∏™‡∏£‡∏∏‡∏õ.*", r"‡∏ó‡∏≥‡πÑ‡∏°.*", r"‡∏à‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö.*"]
    },
    "Applying": {
        "keywords": ["‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", "‡πÅ‡∏Å‡πâ", "‡∏´‡∏≤", "‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤", "‡πÉ‡∏ä‡πâ", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏£‡∏ì‡∏µ", "‡πÅ‡∏Å‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£", "‡∏´‡∏≤‡∏Ñ‡πà‡∏≤", "‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå"],
        "verbs": ["‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", "‡πÅ‡∏Å‡πâ", "‡∏´‡∏≤", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", "‡πÅ‡∏õ‡∏•‡∏á", "‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤", "‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ", "‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå(‡∏á‡πà‡∏≤‡∏¢)", "‡πÉ‡∏ä‡πâ", "‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå"],
        "patterns": [r"‡∏à‡∏á‡∏´‡∏≤.*", r"‡∏à‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì.*", r"‡πÅ‡∏Å‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£.*", r"‡∏à‡∏á‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤.*", r"‡∏à‡∏á‡πÉ‡∏ä‡πâ.*", r"‡∏à‡∏á‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå.*"]
    },
    "Analyzing": {
        "keywords": ["‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", "‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", "‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞", "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î"],
        "verbs": ["‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", "‡∏à‡∏≥‡πÅ‡∏ô‡∏Å", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", "‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞", "‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢"],
        "patterns": [r"‡∏à‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå.*", r"‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö.*", r"‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö.*‡∏ß‡πà‡∏≤.*", r"‡∏à‡∏á‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå.*", r"‡∏à‡∏á‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢.*"]
    },
    "Evaluating": {
        "keywords": ["‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", "‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", "‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå", "‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå", "‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤", "‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", "‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏î"],
        "verbs": ["‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", "‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", "‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡πå", "‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå", "‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤"],
        "patterns": [r"‡∏à‡∏á‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå.*", r"‡∏à‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•.*", r"‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤.*", r"‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô.*‡∏ß‡πà‡∏≤.*", r"‡∏à‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô.*", r".*‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\?*"]
    },
    "Creating": {
        "keywords": ["‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö", "‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô", "‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå", "‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡∏°‡πà", "‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå", "‡πÄ‡∏™‡∏ô‡∏≠", "‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå"],
        "verbs": ["‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö", "‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô", "‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå", "‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ", "‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå", "‡πÄ‡∏™‡∏ô‡∏≠", "‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå", "‡∏à‡∏±‡∏î‡∏ó‡∏≥"],
        "patterns": [r"‡∏à‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö.*", r"‡∏à‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á.*", r"‡∏à‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå.*", r"‡∏à‡∏á‡πÄ‡∏™‡∏ô‡∏≠.*", r"‡∏à‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå.*"]
    }
}

def analyze_bloom_level_math_m4(question_text, choices_list):
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö Bloom's Taxonomy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°.4
    """
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    text_lower = question_text.lower()
    found_levels = []

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
    for level, criteria in BLOOMS_TAXONOMY_MATH_M4.items():
        keywords = criteria["keywords"]
        verbs = criteria["verbs"]
        patterns = criteria["patterns"]

        # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ
        if (any(kw in text_lower for kw in keywords) or
            any(v in text_lower for v in verbs) or
            any(re.search(pat, text_lower) for pat in patterns)):
            found_levels.append(level)

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Creating > Evaluating > Analyzing > Applying > Understanding > Remembering
    priority_order = ["Creating", "Evaluating", "Analyzing", "Applying", "Understanding", "Remembering"]
    for level in priority_order:
        if level in found_levels:
            # ‡∏à‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏ï‡∏≤‡∏° Bloom's
            if level in ["Remembering", "Understanding"]:
                difficulty = "‡∏á‡πà‡∏≤‡∏¢"
            elif level in ["Applying", "Analyzing"]:
                difficulty = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            else: # Creating, Evaluating
                difficulty = "‡∏¢‡∏≤‡∏Å"
            return difficulty, level, found_levels # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å, ‡∏£‡∏∞‡∏î‡∏±‡∏ö Bloom ‡∏ó‡∏µ‡πà‡∏û‡∏ö, ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå Bloom's ‡πÉ‡∏´‡πâ fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏î‡∏¥‡∏°
    word_count = len(question_text.split())
    choice_count = len(choices_list)
    negative_words = ['‡πÑ‡∏°‡πà', '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà', '‡∏ú‡∏¥‡∏î', '‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô', '‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å']
    has_negative_word = any(word in question_text for word in negative_words)
    
    if word_count <= 8 and choice_count >= 4 and not has_negative_word:
        difficulty = '‡∏á‡πà‡∏≤‡∏¢'
    elif word_count <= 15 and choice_count >= 4:
        difficulty = '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'
    else:
        difficulty = '‡∏¢‡∏≤‡∏Å'
        
    reasons_fallback = []
    if word_count <= 8:
        reasons_fallback.append("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô")
    elif word_count > 15:
        reasons_fallback.append("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≤‡∏ß")
    else:
        reasons_fallback.append("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á")

    if choice_count >= 4:
        reasons_fallback.append("‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö 4 ‡∏Ç‡πâ‡∏≠")
    else:
        reasons_fallback.append(f"‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ({choice_count} ‡∏Ç‡πâ‡∏≠)")

    if has_negative_word:
        reasons_fallback.append("‡∏°‡∏µ‡∏Ñ‡∏≥‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡πÄ‡∏ä‡πà‡∏ô '‡πÑ‡∏°‡πà', '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà', '‡∏ú‡∏¥‡∏î'")
    else:
        reasons_fallback.append("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò")
        
    return difficulty, "‡πÑ‡∏°‡πà‡∏û‡∏ö (Fallback)", reasons_fallback

def analyze_exam_detailed(text):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏ï‡∏≤‡∏° Bloom's"""
    lines = text.splitlines()
    questions = []
    current_question = None
    question_count = 0
    choice_count = 0

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á regex ‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
    question_pattern = re.compile(r'^\s*(?:‡∏Ç‡πâ‡∏≠\W*\d+|‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà\W*\d+|\d+\.)\s*', re.IGNORECASE)
    choice_pattern = re.compile(r'^\s*[\(\[\{]?\s*[‡∏Å-‡∏Æ‡πê-‡πô]\s*[\.|\)]|^\s*[\(\[\{]?\s*\d+\s*[\.|\)]')

    for i, line in enumerate(lines):
        line = line.strip()
        if not line:
            continue

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        if question_pattern.match(line):
            question_count += 1
            current_question = {
                'number': question_count,
                'text': line,
                'choices': [],
                'line_number': i
            }
            questions.append(current_question)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà)
        elif current_question and choice_pattern.match(line):
            current_question['choices'].append(line)
            choice_count += 1

    # ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    questions_with_choices = sum(1 for q in questions if len(q['choices']) > 0)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏ï‡∏≤‡∏° Bloom's ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    easy_count = 0
    medium_count = 0
    hard_count = 0

    for question in questions:
        difficulty_level, bloom_level, bloom_indicators = analyze_bloom_level_math_m4(question['text'], question['choices'])
        question['difficulty'] = difficulty_level
        question['bloom_level'] = bloom_level
        question['bloom_indicators'] = bloom_indicators

        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
        if difficulty_level == '‡∏á‡πà‡∏≤‡∏¢':
            easy_count += 1
        elif difficulty_level == '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á':
            medium_count += 1
        else:
            hard_count += 1

    return {
        'total_questions': question_count,
        'total_choices': choice_count,
        'questions_with_choices': questions_with_choices,
        'questions': questions,
        'easy_count': easy_count,
        'medium_count': medium_count,
        'hard_count': hard_count
    }


def extract_text_from_pdf(pdf_reader):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    text = ""
    for page_num, page in enumerate(pdf_reader.pages):
        try:
            extracted = page.extract_text()
            if extracted and extracted.strip():
                text += f"\n--- ‡∏´‡∏ô‡πâ‡∏≤ {page_num + 1} ---\n"
                text += extracted + "\n"
        except Exception as e:
            st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ {page_num + 1}: {str(e)}")
    return text

def ocr_pdf_pages(file_path, dpi=300):
    """OCR PDF ‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ DPI ‡∏™‡∏π‡∏á"""
    if not OCR_AVAILABLE:
        return ""
    try:
        images = convert_from_path(
            file_path,
            poppler_path=POPPLER_PATH,
            dpi=dpi,
            grayscale=True  # ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á OCR
        )
        text = ""
        for i, image in enumerate(images):
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR
            image = image.convert('L')  # grayscale
            page_text = pytesseract.image_to_string(image, lang="tha+eng")
            if page_text.strip():
                text += f"\n--- ‡∏´‡∏ô‡πâ‡∏≤ OCR {i + 1} ---\n"
                text += page_text + "\n"
        return text
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ OCR: {str(e)}")
        return ""

def validate_system_requirements():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
    errors = []
    if not OCR_AVAILABLE:
        errors.append("‡πÑ‡∏°‡πà‡∏û‡∏ö pytesseract ‡∏´‡∏£‡∏∑‡∏≠ pdf2image")
        return errors

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Tesseract
    try:
        if not os.path.exists(pytesseract.pytesseract.tesseract_cmd):
            errors.append("‡πÑ‡∏°‡πà‡∏û‡∏ö Tesseract-OCR ‡∏ó‡∏µ‡πà path ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    except:
        errors.append("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Tesseract ‡πÑ‡∏î‡πâ")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Poppler
    try:
        if POPPLER_PATH and not os.path.exists(POPPLER_PATH):
            errors.append("‡πÑ‡∏°‡πà‡∏û‡∏ö Poppler ‡∏ó‡∏µ‡πà path ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    except:
        errors.append("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Poppler ‡πÑ‡∏î‡πâ")
    return errors

def display_difficulty_analysis(analysis_result):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å"""
    total = analysis_result['total_questions']
    if total == 0:
        return

    easy_count = analysis_result['easy_count']
    medium_count = analysis_result['medium_count']
    hard_count = analysis_result['hard_count']

    easy_pct = (easy_count / total) * 100
    medium_pct = (medium_count / total) * 100
    hard_pct = (hard_count / total) * 100

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
    if easy_pct >= 70:
        overall_difficulty = "‡∏á‡πà‡∏≤‡∏¢"
        difficulty_class = "difficulty-easy-bg"
        emoji = "üü¢"
    elif hard_pct >= 50:
        overall_difficulty = "‡∏¢‡∏≤‡∏Å"
        difficulty_class = "difficulty-hard-bg"
        emoji = "üî¥"
    elif medium_pct >= 50:
        overall_difficulty = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        difficulty_class = "difficulty-medium-bg"
        emoji = "üü°"
    else:
        overall_difficulty = "‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢"
        difficulty_class = "difficulty-mixed-bg"
        emoji = "üü£"

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
    st.markdown(f"""
    <div class='overall-difficulty {difficulty_class}'>
        üìä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: {emoji} {overall_difficulty}
    </div>
    """, unsafe_allow_html=True)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
    st.markdown("""
    <div class='difficulty-summary'>
        <div class='difficulty-item difficulty-easy'>
            <h3>üü¢ ‡∏á‡πà‡∏≤‡∏¢</h3>
            <p style='font-size: 24px; font-weight: bold;'>{}</p>
            <p>{} ‡∏Ç‡πâ‡∏≠ ({:.1f}%)</p>
        </div>
        <div class='difficulty-item difficulty-medium'>
            <h3>üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</h3>
            <p style='font-size: 24px; font-weight: bold;'>{}</p>
            <p>{} ‡∏Ç‡πâ‡∏≠ ({:.1f}%)</p>
        </div>
        <div class='difficulty-item difficulty-hard'>
            <h3>üî¥ ‡∏¢‡∏≤‡∏Å</h3>
            <p style='font-size: 24px; font-weight: bold;'>{}</p>
            <p>{} ‡∏Ç‡πâ‡∏≠ ({:.1f}%)</p>
        </div>
    </div>
    """.format(
        easy_count, easy_count, easy_pct,
        medium_count, medium_count, medium_pct,
        hard_count, hard_count, hard_pct
    ), unsafe_allow_html=True)

def display_analysis_results(analysis_result, min_questions_req, min_choices_req):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"""
    result = analysis_result
    st.markdown(f"""
    <div class='result-box info'>
        <h3>üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö</h3>
        <p><strong>‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> {result['total_questions']} ‡∏Ç‡πâ‡∏≠</p>
        <p><strong>‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> {result['total_choices']} ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
        <p><strong>‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</strong> {result['questions_with_choices']} ‡∏Ç‡πâ‡∏≠</p>
        <p><strong>üìã ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:</strong> ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö ‚â• {min_questions_req}, ‡∏Ç‡πâ‡∏≠‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚â• {min_choices_req}</p>
    </div>
    """, unsafe_allow_html=True)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
    display_difficulty_analysis(analysis_result)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    passed = (result['total_questions'] >= min_questions_req and
              result['questions_with_choices'] >= min_choices_req)
    if passed:
        st.markdown("""
        <div class='result-box success'>
            <h3>üéâ ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô!</h3>
            <p>‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚úÖ</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class='result-box warning'>
            <h3>‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô</h3>
        </div>
        """, unsafe_allow_html=True)
        issues = []
        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if result['total_questions'] < min_questions_req:
            issues.append(f"‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å {min_questions_req - result['total_questions']} ‡∏Ç‡πâ‡∏≠")
        if result['questions_with_choices'] < min_choices_req:
            issues.append(f"‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å {min_choices_req - result['questions_with_choices']} ‡∏Ç‡πâ‡∏≠")

        for issue in issues:
            st.markdown(f"<p style='margin-left: 20px;'>‚Ä¢ {issue}</p>", unsafe_allow_html=True)

def display_detailed_questions(questions):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
    if questions:
        st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö")
        with st.expander("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", expanded=False):
            for i, question in enumerate(questions[:30]):  # ‡πÅ‡∏™‡∏î‡∏á 30 ‡∏Ç‡πâ‡∏≠‡πÅ‡∏£‡∏Å
                with st.container():
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
                    difficulty_emoji = {
                        '‡∏á‡πà‡∏≤‡∏¢': 'üü¢',
                        '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': 'üü°',
                        '‡∏¢‡∏≤‡∏Å': 'üî¥'
                    }.get(question.get('difficulty', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'), '‚ö™')

                    st.markdown(f"**‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {question['number']} {difficulty_emoji} [{question.get('difficulty', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')}]:** {question['text']}")

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö Bloom's (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    if 'bloom_level' in question and question['bloom_level']:
                        st.markdown(f"<div class='bloom-level'><b>üß† ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏° Bloom's:</b> ‡∏£‡∏∞‡∏î‡∏±‡∏ö {question['bloom_level']}</div>", unsafe_allow_html=True)
                        # ‡πÅ‡∏™‡∏î‡∏á indicators ‡∏ó‡∏µ‡πà‡∏û‡∏ö
                        if 'bloom_indicators' in question and isinstance(question['bloom_indicators'], list):
                             st.markdown(f"<small><i>üîç ‡∏û‡∏ö‡∏Ñ‡∏≥/‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {', '.join(question['bloom_indicators'][:3])}</i></small>", unsafe_allow_html=True)
                        elif 'bloom_indicators' in question and isinstance(question['bloom_indicators'], str):
                             # ‡∏Å‡∏£‡∏ì‡∏µ fallback
                             st.markdown(f"<small><i>üîç ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• (Fallback): {question['bloom_indicators']}</i></small>", unsafe_allow_html=True)

                    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ)
                    suggestions = []
                    if question.get('bloom_level') == "Remembering":
                        suggestions.append("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö Remembering ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
                    elif question.get('bloom_level') == "Understanding":
                        suggestions.append("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö Understanding ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à")
                    elif question.get('bloom_level') == "Applying":
                        suggestions.append("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö Applying ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ")
                    elif question.get('bloom_level') == "Analyzing":
                        suggestions.append("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö Analyzing ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                    elif question.get('bloom_level') == "Evaluating":
                        suggestions.append("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö Evaluating ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
                    elif question.get('bloom_level') == "Creating":
                        suggestions.append("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö Creating ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå")
                    elif question.get('bloom_level') == "‡πÑ‡∏°‡πà‡∏û‡∏ö (Fallback)":
                        suggestions.append("‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                    
                    if suggestions:
                        suggestion_html = "<ul>"
                        for s in suggestions:
                            suggestion_html += f"<li>{s}</li>"
                        suggestion_html += "</ul>"
                        st.markdown(f"<div class='improvement-suggestion'><b>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> {suggestion_html}</div>", unsafe_allow_html=True)

                    if question['choices']:
                        st.markdown("**‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:**")
                        for choice in question['choices']:
                            st.markdown(f"- {choice}")
                    else:
                        st.markdown("*‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å*")
                    st.divider()

            if len(questions) > 30:
                st.info(f"‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 30 ‡∏Ç‡πâ‡∏≠‡πÅ‡∏£‡∏Å ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(questions)} ‡∏Ç‡πâ‡∏≠")

# üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
system_errors = validate_system_requirements()
if system_errors:
    st.error("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    for error in system_errors:
        st.markdown(f"- {error}")
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Tesseract-OCR ‡πÅ‡∏•‡∏∞ Poppler")

if st.button("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö", type="primary", use_container_width=True):
    if uploaded_file is None:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")
    else:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å session_state
        current_min_questions = st.session_state.get('min_questions', 10)
        current_min_choices = st.session_state.get('min_choices', 5)

        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå PDF..."):
            try:
                # ‡∏≠‡πà‡∏≤‡∏ô PDF
                pdf_bytes = uploaded_file.read()
                # Reset file pointer for PdfReader
                uploaded_file.seek(0)
                pdf_reader = PdfReader(uploaded_file)

                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF
                st.info("üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF...")
                text = extract_text_from_pdf(pdf_reader)

                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ OCR
                if not text.strip() and OCR_AVAILABLE:
                    st.warning("‚ùóÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô PDF ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ OCR ‡∏≠‡πà‡∏≤‡∏ô...")
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö OCR
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                        tmp_file.write(pdf_bytes)
                        tmp_file_path = tmp_file.name

                    try:
                        text = ocr_pdf_pages(tmp_file_path)
                        if text.strip():
                            st.success("‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ OCR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        else:
                            st.error("‚ùå OCR ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≤‡∏à‡πÄ‡∏ö‡∏•‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î)")
                    finally:
                        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                        if os.path.exists(tmp_file_path):
                            os.unlink(tmp_file_path)
                elif not text.strip():
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF ‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö OCR ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                else:
                    st.success("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
                if text.strip():
                    st.info("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏° Bloom's Taxonomy...")
                    analysis_result = analyze_exam_detailed(text)

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå - ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                    display_analysis_results(analysis_result, current_min_questions, current_min_choices)

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                    display_detailed_questions(analysis_result['questions'])

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging)
                    with st.expander("üîç ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ"):
                        st.text_area("Raw Text", text, height=200)

                else:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF")

            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {str(e)}")
                st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

# ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
st.sidebar.divider()
st.sidebar.subheader("‚ÑπÔ∏è ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
st.sidebar.markdown("""
- ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°.4
- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å PDF ‡πÅ‡∏•‡∏∞ OCR ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  - ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏ï‡∏≤‡∏° Bloom's Taxonomy
""")

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
st.sidebar.divider()
st.sidebar.subheader("ü§ñ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
st.sidebar.markdown("""
**‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:**
- Streamlit
- PyPDF2
- Tesseract OCR
- pdf2image

**‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:**
- ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏õ‡∏Å‡∏ï‡∏¥
- ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏™‡πÅ‡∏Å‡∏ô
- ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
""")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Bloom's Taxonomy
st.sidebar.divider()
st.sidebar.subheader("üìà Bloom's Taxonomy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå")
st.sidebar.markdown("""
- **Remembering (‡∏à‡∏≥):** ‡∏à‡∏≥‡∏™‡∏π‡∏ï‡∏£, ‡∏ô‡∏¥‡∏¢‡∏≤‡∏°
- **Understanding (‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à):** ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢, ‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°
- **Applying (‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ):** ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì, ‡πÅ‡∏Å‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£
- **Analyzing (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå):** ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö, ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
- **Evaluating (‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô):** ‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå, ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
- **Creating (‡∏™‡∏£‡πâ‡∏≤‡∏á):** ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå, ‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå
""")